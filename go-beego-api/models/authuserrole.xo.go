// Package models contains the types for schema 'dbo'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
	"time"
)

// Authuserrole represents a row from 'dbo.AuthUserRole'.
type Authuserrole struct {
	ID           string    `json:"Id"`           // Id
	Orgid        string    `json:"OrgId"`        // OrgId
	Roleid       string    `json:"RoleId"`       // RoleId
	Userid       string    `json:"UserId"`       // UserId
	Positiontype string    `json:"PositionType"` // PositionType
	Revision     int       `json:"Revision"`     // Revision
	Createdby    string    `json:"CreatedBy"`    // CreatedBy
	Createdtime  time.Time `json:"CreatedTime"`  // CreatedTime
	Updatedby    string    `json:"UpdatedBy"`    // UpdatedBy
	Updatedtime  time.Time `json:"UpdatedTime"`  // UpdatedTime

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Authuserrole exists in the database.
func (a *Authuserrole) Exists() bool {
	return a._exists
}

// Deleted provides information if the Authuserrole has been deleted from the database.
func (a *Authuserrole) Deleted() bool {
	return a._deleted
}

// Insert inserts the Authuserrole to the database.
func (a *Authuserrole) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if a._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO dbo.AuthUserRole (` +
		`Id, OrgId, RoleId, UserId, PositionType, Revision, CreatedBy, CreatedTime, UpdatedBy, UpdatedTime` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10` +
		`)`

	// run query
	XOLog(sqlstr, a.ID, a.Orgid, a.Roleid, a.Userid, a.Positiontype, a.Revision, a.Createdby, a.Createdtime, a.Updatedby, a.Updatedtime)
	_, err = db.Exec(sqlstr, a.ID, a.Orgid, a.Roleid, a.Userid, a.Positiontype, a.Revision, a.Createdby, a.Createdtime, a.Updatedby, a.Updatedtime)
	if err != nil {
		return err
	}

	// set existence
	a._exists = true

	return nil
}

// Update updates the Authuserrole in the database.
func (a *Authuserrole) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !a._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if a._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE dbo.AuthUserRole SET ` +
		`OrgId = $1, RoleId = $2, UserId = $3, PositionType = $4, Revision = $5, CreatedBy = $6, CreatedTime = $7, UpdatedBy = $8, UpdatedTime = $9` +
		` WHERE Id = $10`

	// run query
	XOLog(sqlstr, a.Orgid, a.Roleid, a.Userid, a.Positiontype, a.Revision, a.Createdby, a.Createdtime, a.Updatedby, a.Updatedtime, a.ID)
	_, err = db.Exec(sqlstr, a.Orgid, a.Roleid, a.Userid, a.Positiontype, a.Revision, a.Createdby, a.Createdtime, a.Updatedby, a.Updatedtime, a.ID)
	return err
}

// Save saves the Authuserrole to the database.
func (a *Authuserrole) Save(db XODB) error {
	if a.Exists() {
		return a.Update(db)
	}

	return a.Insert(db)
}

// Delete deletes the Authuserrole from the database.
func (a *Authuserrole) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !a._exists {
		return nil
	}

	// if deleted, bail
	if a._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM dbo.AuthUserRole WHERE Id = $1`

	// run query
	XOLog(sqlstr, a.ID)
	_, err = db.Exec(sqlstr, a.ID)
	if err != nil {
		return err
	}

	// set deleted
	a._deleted = true

	return nil
}

// AuthuserroleByID retrieves a row from 'dbo.AuthUserRole' as a Authuserrole.
//
// Generated from index 'PK_AuthUserRole'.
func AuthuserroleByID(db XODB, id string) (*Authuserrole, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`Id, OrgId, RoleId, UserId, PositionType, Revision, CreatedBy, CreatedTime, UpdatedBy, UpdatedTime ` +
		`FROM dbo.AuthUserRole ` +
		`WHERE Id = $1`

	// run query
	XOLog(sqlstr, id)
	a := Authuserrole{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&a.ID, &a.Orgid, &a.Roleid, &a.Userid, &a.Positiontype, &a.Revision, &a.Createdby, &a.Createdtime, &a.Updatedby, &a.Updatedtime)
	if err != nil {
		return nil, err
	}

	return &a, nil
}
