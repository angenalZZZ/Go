// Package models contains the types for schema 'dbo'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
	"time"
)

// Authrole represents a row from 'dbo.AuthRole'.
type Authrole struct {
	ID          string    `json:"Id"`          // Id
	Code        string    `json:"Code"`        // Code
	Sortcode    string    `json:"SortCode"`    // SortCode
	Name        string    `json:"Name"`        // Name
	Type        string    `json:"Type"`        // Type
	Inworkflow  string    `json:"InWorkFlow"`  // InWorkFlow
	Status      string    `json:"Status"`      // Status
	Summary     string    `json:"Summary"`     // Summary
	Revision    int       `json:"Revision"`    // Revision
	Createdby   string    `json:"CreatedBy"`   // CreatedBy
	Createdtime time.Time `json:"CreatedTime"` // CreatedTime
	Updatedby   string    `json:"UpdatedBy"`   // UpdatedBy
	Updatedtime time.Time `json:"UpdatedTime"` // UpdatedTime

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Authrole exists in the database.
func (a *Authrole) Exists() bool {
	return a._exists
}

// Deleted provides information if the Authrole has been deleted from the database.
func (a *Authrole) Deleted() bool {
	return a._deleted
}

// Insert inserts the Authrole to the database.
func (a *Authrole) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if a._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO dbo.AuthRole (` +
		`Id, Code, SortCode, Name, Type, InWorkFlow, Status, Summary, Revision, CreatedBy, CreatedTime, UpdatedBy, UpdatedTime` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13` +
		`)`

	// run query
	XOLog(sqlstr, a.ID, a.Code, a.Sortcode, a.Name, a.Type, a.Inworkflow, a.Status, a.Summary, a.Revision, a.Createdby, a.Createdtime, a.Updatedby, a.Updatedtime)
	_, err = db.Exec(sqlstr, a.ID, a.Code, a.Sortcode, a.Name, a.Type, a.Inworkflow, a.Status, a.Summary, a.Revision, a.Createdby, a.Createdtime, a.Updatedby, a.Updatedtime)
	if err != nil {
		return err
	}

	// set existence
	a._exists = true

	return nil
}

// Update updates the Authrole in the database.
func (a *Authrole) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !a._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if a._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE dbo.AuthRole SET ` +
		`Code = $1, SortCode = $2, Name = $3, Type = $4, InWorkFlow = $5, Status = $6, Summary = $7, Revision = $8, CreatedBy = $9, CreatedTime = $10, UpdatedBy = $11, UpdatedTime = $12` +
		` WHERE Id = $13`

	// run query
	XOLog(sqlstr, a.Code, a.Sortcode, a.Name, a.Type, a.Inworkflow, a.Status, a.Summary, a.Revision, a.Createdby, a.Createdtime, a.Updatedby, a.Updatedtime, a.ID)
	_, err = db.Exec(sqlstr, a.Code, a.Sortcode, a.Name, a.Type, a.Inworkflow, a.Status, a.Summary, a.Revision, a.Createdby, a.Createdtime, a.Updatedby, a.Updatedtime, a.ID)
	return err
}

// Save saves the Authrole to the database.
func (a *Authrole) Save(db XODB) error {
	if a.Exists() {
		return a.Update(db)
	}

	return a.Insert(db)
}

// Delete deletes the Authrole from the database.
func (a *Authrole) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !a._exists {
		return nil
	}

	// if deleted, bail
	if a._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM dbo.AuthRole WHERE Id = $1`

	// run query
	XOLog(sqlstr, a.ID)
	_, err = db.Exec(sqlstr, a.ID)
	if err != nil {
		return err
	}

	// set deleted
	a._deleted = true

	return nil
}

// AuthroleByID retrieves a row from 'dbo.AuthRole' as a Authrole.
//
// Generated from index 'PK_AuthRole'.
func AuthroleByID(db XODB, id string) (*Authrole, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`Id, Code, SortCode, Name, Type, InWorkFlow, Status, Summary, Revision, CreatedBy, CreatedTime, UpdatedBy, UpdatedTime ` +
		`FROM dbo.AuthRole ` +
		`WHERE Id = $1`

	// run query
	XOLog(sqlstr, id)
	a := Authrole{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&a.ID, &a.Code, &a.Sortcode, &a.Name, &a.Type, &a.Inworkflow, &a.Status, &a.Summary, &a.Revision, &a.Createdby, &a.Createdtime, &a.Updatedby, &a.Updatedtime)
	if err != nil {
		return nil, err
	}

	return &a, nil
}
